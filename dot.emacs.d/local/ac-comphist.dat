((("reverse" .
   [1 0 0 0 0 0 0])
  ("my-assoc" .
   [1 0 0 0 0 0 0 0])
  ("alist" .
   [3 0 0 0 0])
  ("proper-list?" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("pushnew" .
   [2 0 0 0 0 0 0])
  ("every" .
   [2 0 0 0 0])
  ("subseq" .
   [4 0 0 0 0 0])
  ("my-copy-list" .
   [0 0 0 0 0 0 0 1 0 0 0 2])
  ("list" .
   [3 0 0 0])
  ("lst" .
   [1 0 0])
  ("copy-list" .
   [0 0 0 0 1 1 0 0 0])
  ("setf" .
   [3 0 0 0])
  ("atom" .
   [5 0 0 0])
  ("null" .
   [2 0 0 0])
  ("consp" .
   [7 0 0 0 0])
  ("cons" .
   [7 0 0 0])
  ("direction" .
   [0 0 0 0 0 0 0 0 1])
  ("*object-locations*" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("*objects*" .
   [0 0 0 0 0 1 0 0 1])
  ("describe-objects" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("*edges*" .
   [2 0 0 0 0 0 0])
  ("describe-paths" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("*location*" .
   [4 0 0 0 0 0 1 0 0 0])
  ("append" .
   [3 0 0 0 0 0])
  ("apply" .
   [5 0 0 0 0])
  ("mapcar" .
   [2 0 0 0 1 0])
  ("objects-at" .
   [1 0 0 0 0 0 0 0 0 0])
  ("describe-" .
   [0 0 0 0 0 0 0 0 1])
  ("labels" .
   [1 0 0 0 0 0])
  ("obj-locs" .
   [2 0 0 0 0 0 0 0])
  ("objs" .
   [3 0 0 0])
  ("at-loc-p" .
   [0 0 0 0 0 0 1 0])
  ("chain" .
   [1 0 0 0 0])
  ("whiskey" .
   [1 0 0 0 0 0 0])
  ("there" .
   [1 0 0 0 0])
  ("describe-location" .
   [0 0 0 0 0 0 2 0 0 0 0 0 0 1 0 0 0])
  ("ladder" .
   [1 0 0 0 0 0])
  ("attic" .
   [2 0 0 0 0])
  ("defparameter" .
   [0 0 0 0 0 4 0 1 0 0 0 0])
  ("nodes" .
   [1 0 0 0 0])
  ("location" .
   [1 0 0 0 0 0 0 0])
  ("*nodes*" .
   [0 0 0 0 0 1 1])
  ("garden" .
   [5 0 0 0 0 0])
  ("assoc" .
   [4 0 0 0 0])
  ("living-room" .
   [1 0 0 0 1 1 1 0 0 0 3])
  ("equalp" .
   [1 0 0 0 0 0])
  ("equal" .
   [8 0 0 0 0])
  ("apple" .
   [2 0 0 0 0])
  ("its-an-apple" .
   [0 0 0 0 0 0 0 0 1 0 0 0])
  ("*fruit*" .
   [1 0 0 0 1 0 0])
  ("find-if" .
   [1 0 0 0 0 0 1])
  ("member" .
   [3 0 0 0 0 0])
  ("henry" .
   [1 0 0 0 0])
  ("johnny" .
   [2 0 0 0 0 0])
  ("pudding" .
   [2 0 0 0 0 0 0])
  ("*arch-enemy*" .
   [0 0 0 0 0 0 2 0 0 0 0 0])
  ("person" .
   [3 0 0 0 0 0])
  ("defvar" .
   [1 0 0 0 0 0])
  ("even-number" .
   [0 0 0 0 0 1 0 0 0 0 0])
  ("*number-is-odd*" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("odd-number" .
   [0 0 0 0 0 1 1 0 0 0])
  ("*number-was-odd*" .
   [0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0])
  ("my-length" .
   [1 0 0 0 0 1 0 0 0])
  ("defun" .
   [41 0 0 0 0])
  ("シンタックスとセマンティクス" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("helm-ack" .
   [1 0 0 0 0 0 0 0])
  ("helm-c-ack-version" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("call-process-shell-command" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("helm-c-set-ack-version" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("helm-mode" .
   [1 0 0 0 0 0 0 0 0])
  ("js2-mode" .
   [1 0 0 0 0 0 0 0])
  ("ac-modes" .
   [1 0 0 0 0 0 0 0])
  ("locate-library" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("when" .
   [5 0 0 0])
  ("c-mode-common-hook" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("c-mode-hook" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("auto-mode-alist" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("require" .
   [3 0 0 0 0 0 0])
  ("gtags" .
   [1 0 0 0 0])
  ("add-to-list" .
   [0 0 0 0 0 0 0 1 0 0 1])
  ("load-path" .
   [0 0 0 0 0 0 0 0 1])
  ("get_status" .
   [0 0 0 0 0 1 0 0 0 0])
  ("prototype" .
   [0 0 0 0 0 1 0 0 0])
  ("status" .
   [0 0 0 0 1 0])
  ("color-theme-midnight" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("global-set-key" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 1])
  ("helm-select" .
   [0 0 0 0 0 0 0 0 0 0 1])
  ("helm-find-1" .
   [0 0 0 0 0 0 0 1 0 0 0])
  ("helm-gtags-mode" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("helm-mini" .
   [1 0 0 0 0 0 0 0 0])
  ("helm-c-moccur" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("web-mode-hook" .
   [0 0 0 0 0 0 0 0 0 0 2 0 0])
  ("global-auto-complete-mode" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("slime" .
   [1 0 0 0 0])
  ("carrots" .
   [2 0 0 0 0 0 0])
  ("tomatoes" .
   [1 0 0 0 1 0 0 0])
  ("chicken" .
   [2 0 0 0 0 0 0])
  ("cannot" .
   [1 0 0 0 0 0])
  ("setTimeout" .
   [1 0 0 0 0 0 0 0 0 0])
  ("helper" .
   [1 0 0 0 0 0])
  ("console" .
   [2 0 0 0 0 0 0])
  ("func" .
   [3 0 0 0])
  ("repeat_p" .
   [3 0 0 0 0 0 0 0])
  ("function" .
   [5 0 0 0 0 0 0 0])
  ("delay" .
   [5 0 0 0 0])
  ("timer" .
   [4 0 0 0 0])
  ("Timer" .
   [2 0 0 0 0])
  ("true" .
   [1 0 0 0])
  ("cancel" .
   [1 0 0 0 0 0])
  ("Lisp" .
   [1 0 0 0])
  ("print" .
   [2 0 0 0 0])
  ("read" .
   [2 0 0 0])
  ("command" .
   [6 0 0 0 0 0 0])
  ("game-repl" .
   [1 0 0 0 0 0 0 0 0])
  ("game-read" .
   [1 0 0 0 0 0 0 0 0])
  ("quote-it" .
   [1 0 0 0 0 0 0 0])
  ("quote" .
   [3 0 0 0 0])
  ("format" .
   [7 0 0 0 0 0])
  ("string" .
   [1 0 0 0 0 0])
  ("ask-number" .
   [0 0 0 0 0 0 1 0 0 0])
  ("defconstant" .
   [0 0 0 0 0 0 1 0 0 0 0])
  ("*glob*" .
   [2 0 0 0 0 1])
  ("boundp" .
   [1 0 0 0 0 0])
  ("remove" .
   [3 0 0 0 0 0])
  ("start" .
   [6 0 0 0 0])
  ("show-squares" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  ("show-squares-recur" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("dolist" .
   [2 0 0 0 0 0])
  ("length" .
   [6 0 0 0 0 0])
  ("my-length-iter" .
   [0 0 0 0 0 0 0 1 0 1 0 0 0 0])
  ("my-length-recur" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 1])
  ("funcall" .
   [2 0 0 0 0 0 0])
  ("lambda" .
   [4 0 0 0 0 0])
  ("listp" .
   [4 0 0 0 1])
  ("enigma" .
   [1 0 0 0 0 0])
  ("mystery" .
   [1 0 0 0 0 0 0])
  ("elem-listp" .
   [1 0 0 0 0 0 0 0 0 0])
  ("elem-listp2" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("elem-listp-ex" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("show-dot-iter" .
   [1 0 0 0 1 0 0 0 0 0 0 0 0])
  ("progn" .
   [2 0 0 0 0])
  ("show-dot-recur" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("count" .
   [3 0 0 0 0])
  ("count-symbol-" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("count-symbol-recur" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("summit2" .
   [2 0 0 0 0 0 0])
  ("summit" .
   [1 0 0 0 0 0])
  ("summit2-fixed" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0])
  ("compress" .
   [1 0 0 0 0 0 0 0])
  ("compr" .
   [3 0 0 0 0])
  ("nthcdr" .
   [1 0 0 0 0 0])
  ("my-nthcdr" .
   [0 0 0 0 0 0 1 0 0])
  ("maplist" .
   [1 0 0 0 0 0 0])
  ("my-copy-tree" .
   [3 0 0 0 0 0 0 0 0 0 0 0])
  ("substitute" .
   [0 0 0 0 0 0 1 0 0 0])
  ("member-if" .
   [1 0 0 0 0 0 0 0 0])
  ("my-member-if" .
   [0 0 0 0 0 0 1 0 0 0 0 0])))
